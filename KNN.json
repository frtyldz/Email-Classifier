{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import csv\n",
    "import math\n",
    "import random\n",
    "import operator\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg\n",
    "\n",
    "trainFeatures = np.genfromtxt(\"question-3-train-features.csv\", delimiter=\",\")\n",
    "trainLabels = np.genfromtxt(\"question-3-train-labels.csv\", delimiter=\",\")\n",
    "validFeatures = np.genfromtxt(\"question-3-valid-features.csv\", delimiter=\",\")\n",
    "validLabels = np.genfromtxt(\"question-3-valid-labels.csv\", delimiter=\",\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 350,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 358,
   "metadata": {},
   "outputs": [],
   "source": [
    "k = 3\n",
    "trainF = np.array(trainFeatures)\n",
    "validF = np.array(validFeatures)\n",
    "trainL = np.array(trainLabels)\n",
    "testLab = np.array(validLabels)\n",
    "nn = 0\n",
    "trueN = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 354,
   "metadata": {},
   "outputs": [],
   "source": [
    "def euclidean_distance(sample1, sample2):\n",
    "    assert len(sample1) == len(sample2), \"Different number of features exist for the given samples\"\n",
    "    return np.power(np.subtract(sample1, sample2), 2).sum()\n",
    "\n",
    "def get_neighbors(trainData, testArr, k):\n",
    "    distances = []\n",
    "    neighbors = []\n",
    "    \n",
    "    for index in range(len(trainData)):\n",
    "        distances.append((euclidean_distance(trainData[index], testArr), index))\n",
    "        \n",
    "    distances.sort(key = operator.itemgetter(0))\n",
    "    \n",
    "    for i in range(k):\n",
    "        neighbors.append(distances[i])\n",
    "    return neighbors\n",
    "\n",
    "def classify(distanceArray, k):\n",
    "    class_Arr = []\n",
    "    for index in range(k):\n",
    "        class_Arr.append(trainL[distanceArray[index][1]])\n",
    "    return max(set(class_Arr), key=class_Arr.count)\n",
    "\n",
    "def calc_accuracy(gt_y, pred_y):\n",
    "    correct = 0\n",
    "    for g_y, p_y in zip(gt_y, pred_y):\n",
    "        if g_y == p_y: \n",
    "            correct += 1\n",
    "            if(g_y == 1):\n",
    "                global trueN\n",
    "                trueN += 1\n",
    "\n",
    "    return (correct/float(len(gt_y))*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 360,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "78.38405036726128\n",
      "Runtime:  457.3507800102234\n",
      "Precision 35.60606060606061\n"
     ]
    }
   ],
   "source": [
    "seconds = time.time()\n",
    "finArr = []\n",
    "for arr in range(len(validF)):\n",
    "    neighbors = get_neighbors(trainF, validF[arr], k)\n",
    "    onesNum = classify(neighbors, k)\n",
    "    if(onesNum == 1):\n",
    "        global nn\n",
    "        nn += 1\n",
    "    finArr.append(onesNum) \n",
    "print(calc_accuracy(finArr, testLab))\n",
    "endSeconds = time.time()\n",
    "print(\"Runtime: \", endSeconds - seconds)\n",
    "#print(\"Precision\", (trueN/(nn))*100)\n",
    "#print(finArr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
